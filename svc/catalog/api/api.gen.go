// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Item defines model for Item.
type Item struct {
	// Unique ID of the item
	Id int64 `json:"id"`

	// Name of the item
	Name *string `json:"name,omitempty"`
}

// NewItem defines model for NewItem.
type NewItem struct {
	// Name of the item
	Name string `json:"name"`
}

// CreateItemJSONBody defines parameters for CreateItem.
type CreateItemJSONBody = NewItem

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody = CreateItemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Swagger documentation
	// (GET /api-docs)
	GetApiDocs(ctx echo.Context) error
	// Returns all items
	// (GET /api/v1/items)
	GetItems(ctx echo.Context) error
	// Create new item
	// (POST /api/v1/items)
	CreateItem(ctx echo.Context) error
	// Removes an item by ID
	// (DELETE /api/v1/items/{id})
	DeleteItemByID(ctx echo.Context, id int64) error
	// Returns an item by ID
	// (GET /api/v1/items/{id})
	FindItemByID(ctx echo.Context, id int64) error
	// Updates an item by ID
	// (PUT /api/v1/items/{id})
	UpdateItemByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiDocs(ctx)
	return err
}

// GetItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetItems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetItems(ctx)
	return err
}

// CreateItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateItem(ctx)
	return err
}

// DeleteItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItemByID(ctx, id)
	return err
}

// FindItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindItemByID(ctx, id)
	return err
}

// UpdateItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateItemByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api-docs", wrapper.GetApiDocs)
	router.GET(baseURL+"/api/v1/items", wrapper.GetItems)
	router.POST(baseURL+"/api/v1/items", wrapper.CreateItem)
	router.DELETE(baseURL+"/api/v1/items/:id", wrapper.DeleteItemByID)
	router.GET(baseURL+"/api/v1/items/:id", wrapper.FindItemByID)
	router.PUT(baseURL+"/api/v1/items/:id", wrapper.UpdateItemByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SUTU/cMBCG/4o17TElS4t6yK2wapULhyJOaA8mmWRdxR+MnUUr5P9e2U4WSMJHEaIX",
	"SLzxzLzPvDN3UGlptELlLBR3YKstSh4fS4cy/DekDZITGE9FHf7WaCsSxgmtoIBLJW56ZOWa6Ya5LTIR",
	"rmbQaJLcQQFCue8nkIHbG0yv2CKBz0BxifOA51ziJNZw1ToSqgXvMyC86QVhDcVVqGrjMzjH2+Wq3ylN",
	"DLPx4VioRs8jXiDtRIWM0BqtrLjukDWamOSKt0K1rOKOd7qN6WzIJ1wXEp6lc8hgh2RTsOOj1dEqQNIG",
	"FTcCCvgWjzIw3G2jsJwb8aXWVXxp0c1L+o2uJ2XZxS1vWyRW66qXqByPv8fgFJ/LGgr4he6HEesQMEiP",
	"KhLCr6vVgt7FoIGP7aXktH/2m1B8vjvOE4yXBHCVqLGGtIw9G2AeLakoB8BLGiqtHKqYihvTiSrezP/Y",
	"kG+cgWj2sbDPhA0U8Cm/n5Z8GJU8Os4frMOJ+B6iRx7riBWNzsAJpIPIrhu84TMw2i7wOCPkDg88mFBP",
	"g0jflsnbwclo3amu9/9E4Tnx48T5x6PiqEc/g3/8bmnvc84ZP4U4sWAKb9OwzxyY34naJ94duoV9sY7n",
	"NmGfupBdc4s10yoelmtm+yAP61lTUphQ6um+XMdpJi7RIVkorqZJ01Ydm+00G6oLKwiKuAlg3KNhD07b",
	"kD1A+uJC9ptZ007mHCLlVEY987HUuwfmvN6zch28/JrRfsVk/xSqfjO5Bl21/TBwq//q9inaQyNMv9CI",
	"S1M/sVNeb+sU483N6eP1j+3OAs5UxtTWUz4DzfgR0m6U2FMHBeTgN/5vAAAA//+9mF5QWQkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
