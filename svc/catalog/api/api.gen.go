// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error message
	Message string `json:"message"`
}

// ItemResponse defines model for ItemResponse.
type ItemResponse struct {
	// Description of the item
	Description *string `json:"description,omitempty"`

	// Unique ID of the item
	Id *uint `json:"id,omitempty"`

	// Name of the item
	Name *string `json:"name,omitempty"`

	// Price of the item
	Price *float64 `json:"price,omitempty"`

	// Currency of the price
	PriceCode *string `json:"priceCode,omitempty"`
}

// NewItemRequest defines model for NewItemRequest.
type NewItemRequest struct {
	// Description of the item
	Description string `json:"description"`

	// Name of the item
	Name string `json:"name"`

	// Price of the item
	Price float64 `json:"price"`

	// Currency of the price
	PriceCode string `json:"priceCode"`
}

// UpdateItemRequest defines model for UpdateItemRequest.
type UpdateItemRequest struct {
	// Description of the item
	Description *string `json:"description,omitempty"`

	// Name of the item
	Name *string `json:"name,omitempty"`

	// Price of the item
	Price *float64 `json:"price,omitempty"`

	// Currency of the price
	PriceCode *string `json:"priceCode,omitempty"`
}

// GetItemsParams defines parameters for GetItems.
type GetItemsParams struct {
	// Number of elements to be returned. Default 100
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page number.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// CreateItemJSONBody defines parameters for CreateItem.
type CreateItemJSONBody = NewItemRequest

// UpdateItemByIDJSONBody defines parameters for UpdateItemByID.
type UpdateItemByIDJSONBody = UpdateItemRequest

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody = CreateItemJSONBody

// UpdateItemByIDJSONRequestBody defines body for UpdateItemByID for application/json ContentType.
type UpdateItemByIDJSONRequestBody = UpdateItemByIDJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Swagger documentation
	// (GET /api-docs)
	GetApiDocs(ctx echo.Context) error
	// Returns all items
	// (GET /api/v1/items)
	GetItems(ctx echo.Context, params GetItemsParams) error
	// Create new item
	// (POST /api/v1/items)
	CreateItem(ctx echo.Context) error
	// Removes an item by ID
	// (DELETE /api/v1/items/{id})
	DeleteItemByID(ctx echo.Context, id uint) error
	// Returns an item by ID
	// (GET /api/v1/items/{id})
	FindItemByID(ctx echo.Context, id uint) error
	// Updates an item by ID
	// (PUT /api/v1/items/{id})
	UpdateItemByID(ctx echo.Context, id uint) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiDocs(ctx)
	return err
}

// GetItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetItems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetItems(ctx, params)
	return err
}

// CreateItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateItem(ctx)
	return err
}

// DeleteItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItemByID(ctx, id)
	return err
}

// FindItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindItemByID(ctx, id)
	return err
}

// UpdateItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateItemByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api-docs", wrapper.GetApiDocs)
	router.GET(baseURL+"/api/v1/items", wrapper.GetItems)
	router.POST(baseURL+"/api/v1/items", wrapper.CreateItem)
	router.DELETE(baseURL+"/api/v1/items/:id", wrapper.DeleteItemByID)
	router.GET(baseURL+"/api/v1/items/:id", wrapper.FindItemByID)
	router.PUT(baseURL+"/api/v1/items/:id", wrapper.UpdateItemByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yXzW7jNhDHX4WY9qhadotedOvGbeHLokiwp0UOtDhWWIgfGZIO3EDvXpD0t+iNu8gG",
	"QdubTJEzo/n/ZoZ+htYoazRq76B5Btc+oOLp8VciQ7forNEO44IlY5G8xPRaoXO8Sy8Eupak9dJoaPI5",
	"tntdgd9YhAacJ6k7GIYKCB+DJBTQfN6buR8qWHhUlx2eeDl3Oj/8YmbF/AMy6VGN3Vcgxfj4Jy0fA7LF",
	"/OzwypDiHhoIUvuDMak9dkjRmuaqkIOPXOFLcViSbeHoH3H5UhjChGV/lFQd1DLHkazdGFGweBOIULeb",
	"ndHseCzMUMFHfMoiPAZ0/ttp8C/K2inO6cOqE1O7mI+9Rdo/WcE9/p/ufwhpzLjUKzM2cYe0jmFRbiFy",
	"2SNbxVbENe+k7ljLPe9NlwJ20bb0fTR+k9ehgjWSy8Zmk+lkGmM2FjW3Ehr4KS1VYLl/SPLU3MofhGnT",
	"jw79OKRb9IG0Y3dPvOuQmDBtUKg935IRxU7PCwEN/I7+Fyvn0WCkKjfCZPzH6bTwvUWjQwU/592t0R51",
	"iopb28s2baj/dJmm3Orj0/eEK2jgu/owC+rtIKhPp0DKfqnd02FHBS4oxWlzOcShSrmr17M6a/FS/rjO",
	"orEVGZX42Go5KSVxsdXXcuIKPZKD5vOI/kRlxA17jLE55g1bRnyiTxQTNscVD71ns2mUXcZTjwFpA7uK",
	"Ass7vJN/RVAP6RT5GDSz6bQCJbVUQUEzG4+PoRoVFu+Q5YKZfMFn2d+xt2nB232Zqqs52Wv1JWBOhviw",
	"j4IT8U2JnyTWJX72+vf9tmpjFzGugMoNIfe4R4VJfZmRvHeR+xbl7vvBiM2rVc3ZHB1Ox4SngMNIi9mr",
	"eT+VoJzyo4y/p4aRlWEan/JYGbWK+lmKIavfo8fSWIzrLkNw3i7YkjsUzOi0uJgzF+KHohghks3ETH3Y",
	"LOYvNZN8cdyh5w3bRret4DgxDgUsBZzTcFzOL905L5VxQeMchXhfEt+iMuujQl1u2GIeQ7xmAlwxAH6T",
	"Wny1biv07cObyvZfr/hzgfc42FDAIV+aS13++tI+XLy/CpGQjn9DRl5/HI3/alw1kd6Yz5zYd9atzoHb",
	"4pk2Ia13zATqoYEahvvh7wAAAP//3kor2lMRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
