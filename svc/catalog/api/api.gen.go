// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error message
	Message string `json:"message"`
}

// Item defines model for Item.
type Item struct {
	// Description of the item
	Description string `json:"description"`

	// Unique ID of the item
	Id uint `json:"id"`

	// Name of the item
	Name string `json:"name"`

	// Price of the item
	Price float64 `json:"price"`

	// Currency of the price
	PriceCode string `json:"priceCode"`
}

// NewItem defines model for NewItem.
type NewItem struct {
	// Description of the item
	Description string `json:"description"`

	// Name of the item
	Name string `json:"name"`

	// Price of the item
	Price float64 `json:"price"`

	// Currency of the price
	PriceCode string `json:"priceCode"`
}

// CreateItemJSONBody defines parameters for CreateItem.
type CreateItemJSONBody = NewItem

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody = CreateItemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Swagger documentation
	// (GET /api-docs)
	GetApiDocs(ctx echo.Context) error
	// Returns all items
	// (GET /api/v1/items)
	GetItems(ctx echo.Context) error
	// Create new item
	// (POST /api/v1/items)
	CreateItem(ctx echo.Context) error
	// Removes an item by ID
	// (DELETE /api/v1/items/{id})
	DeleteItemByID(ctx echo.Context, id uint) error
	// Returns an item by ID
	// (GET /api/v1/items/{id})
	FindItemByID(ctx echo.Context, id uint) error
	// Updates an item by ID
	// (PUT /api/v1/items/{id})
	UpdateItemByID(ctx echo.Context, id uint) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiDocs(ctx)
	return err
}

// GetItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetItems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetItems(ctx)
	return err
}

// CreateItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateItem(ctx)
	return err
}

// DeleteItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItemByID(ctx, id)
	return err
}

// FindItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindItemByID(ctx, id)
	return err
}

// UpdateItemByID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateItemByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateItemByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api-docs", wrapper.GetApiDocs)
	router.GET(baseURL+"/api/v1/items", wrapper.GetItems)
	router.POST(baseURL+"/api/v1/items", wrapper.CreateItem)
	router.DELETE(baseURL+"/api/v1/items/:id", wrapper.DeleteItemByID)
	router.GET(baseURL+"/api/v1/items/:id", wrapper.FindItemByID)
	router.PUT(baseURL+"/api/v1/items/:id", wrapper.UpdateItemByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWTW/bMAz9KwK3o1en+7j4tibb4EsxtOip6EGxGEeDLamUnCIo/N8HSc6X7SxB0RXD",
	"brYsPZLvkU9+hkLXRitUzkL2DLZYYs3D4zciTTdojVYW/YIhbZCcxPC5Rmt5GT4ItAVJ46RWkMVzbPM5",
	"Abc2CBlYR1KV0LYJED42klBAdr+FeWgTyB3Ww0AH6P1gs90b0wvmlsikRxmETUCK4fE7JR8bZPmsd3ih",
	"qeYOMmikcjswqRyWSB5N8Xqk9mte46k8DMli5OhPv3wsDaGbebVHpmrqecwjoE21GEGcNkSoivUGNAY+",
	"JYgU0FWXHOBtEt8P6UW7xqe/q9t/y/TZJPuDUi30MPAt0soXQ3FM5bxCtvDTxxUvpSpZwR2vdBnKtD4j",
	"6Sqf0jSuQwIrJBvBLi8mFxNfqTaouJGQwaewlIDhbhlETbmRH4QuwkuJbpjSDbqGlGW3T7wskZjQRVOj",
	"crwr0LdIeM4FZPAD3VcjZx7QkxPNJoB/nExG6h0FbRP4EncXWjlUIStuTCWLsCH9ZWMPRnfzT+8JF5DB",
	"u3Rnf2nnfemh8QX2xxyOdjsSsE1dc1ofT7FNAnfp6jKNWpzij6soGluQrkNXdVpejJGYd/qOUXg2KdvE",
	"/sROGPZ229uciK/HSAoZHSNpW2RVda3pB0zbET6mhNzhlg8m1XEi4t48jrQfNbTuSov1q7XGxuzaw1l2",
	"1GA7IP/y1cLuYg453qP4XxqDKAVT+BQtdjAA6bMUbZS7QodjV4Rft1H1/hCwObcomFZhMZ8x2/hCUQx6",
	"IsJ4pq7W+Sx4GfEaHZKF7L4fNP4JbHrNadZl5w0YsuCDm+sxi1flYRcke+Se+oloHwYt83lIQ9A4ZiEG",
	"U1Tr1d5ozNcsn/k2OMdYzvCV71KJFxO3QFcs34q3yVuP2rib9XUwzYgOd0YcMbTzmzpivFibJhx/U3FG",
	"2IxZ9Ju6T09HZtiEtNpU2FAFGaTQPrS/AwAA//+SkELcxAwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
